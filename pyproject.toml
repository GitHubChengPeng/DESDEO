[tool.poetry]
name = "desdeo"
version = "2.0.0"
description = "DESDEO is a modular and open source framework for interactive multiobjective optimization."
authors = ["Giovanni Misitano <giovanni.a.misitano@jyu.fi>", "Bhupinder Saini <bhupinder.s.saini@jyu.fi>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
numpy = "^1.26.2"
scipy = "^1.11.4"
polars = { version = "^0.19.19", optional = true }
polars-lts-cpu = { version = "^0.19.19", optional = true }
jupyterlab = "^4.0.9"  # Should this be a dev dependency? As long as we don't publish to PyPI, I guess it's fine.
seaborn = "^0.13.0"
plotly = "^5.18.0"
pydantic = "^2.5.2"
sympy = "^1.12"
pyparsing = "^3.1.1"
fastapi = "^0.106.0"
uvicorn = {extras = ["standard"], version = "^0.25.0"}
sqlalchemy = "^2.0.23"
passlib = "^1.7.4"
numba = "^0.59.0"

[tool.poetry.extras]
standard = ["polars"]
legacy = ["polars-lts-cpu"]
viz = ["seaborn", "plotly"]  # We could make viz packages optional in the future.
api = ["fastapi", "uvicorn", "sqlalchemy", "passlib"]  # We could make API packages optional in the future.

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.6"
pytest = "^7.4.3"
mkdocs = "^1.5.3"
erdantic = "^0.6.0"
python-markdown-math = "^0.8"
mkdocs-macros-plugin = "^1.0.5"
djlint = "^1.34.1"
pyparsing = {extras = ["diagrams"], version = "^3.1.1"}
isort = "^5.13.2"


[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",
    "F",
    "W",
    "C901",
    "D",
    "UP",
    "S",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "T20",
    "PIE",
    "RET",
    "PTH",
    "TD",  # Comment this out if too annoying
    "FIX",  # Comment this out if too annoying
    "SIM",
    "PL",
    "TRY",
    "FURB",
    "LOG",
    "NPY",
    "RUF",
    "I",
    "N",
]
ignore = [
	"COM812", # Enforcing trailing commas is too annoying.
	"PLR0915", # "too many statements (>50)"
	"T201", # allow print statements
]  
pydocstyle.convention = "google"


# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = []
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.12.
target-version = "py312"

[tool.ruff.per-file-ignores]
# Ignore certain rules in test files
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
]

[tool.ruff.format]
quote-style = "double"

[tool.djlint]
profile="jinja"

[tool.isort]
profile="black"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
